{"version":3,"sources":["icons.jsx","helpers.tsx","components/Login.jsx","components/data/PlaylistsData.tsx","components/ConfigDropdown.tsx","components/PlaylistSearch.tsx","components/data/TracksData.tsx","components/data/TracksBaseData.tsx","components/data/TracksArtistsData.tsx","components/data/TracksAudioFeaturesData.tsx","components/PlaylistExporter.tsx","components/PlaylistRow.jsx","components/Paginator.jsx","components/PlaylistTable.jsx","components/PlaylistsExporter.jsx","components/Logout.tsx","components/FilterSliders.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["library","add","fab","faCheckCircle","faTimesCircle","faFileArchive","faHeart","faBolt","faMusic","faDownload","faCog","faSearch","faTimes","faSignOutAlt","getQueryParam","name","replace","results","RegExp","exec","window","location","search","decodeURIComponent","limiter","Bottleneck","maxConcurrent","minTime","on","error","jobInfo","a","response","status","retryCount","headers","Bugsnag","notify","event","addMetadata","config","groupingHash","apiCall","wrap","url","accessToken","axios","get","apiCallErrorHandler","isAxiosError","request","href","split","Login","clientId","changeUser","encodeURIComponent","protocol","host","pathname","join","Button","id","type","variant","size","onClick","this","authorize","icon","React","Component","PlaylistsData","userId","onPlaylistsLoadingStarted","onPlaylistsLoadingDone","PLAYLIST_LIMIT","SEARCH_LIMIT","data","dataInitialized","loadSlice","length","start","end","loadAll","query","filter","p","toLowerCase","includes","slice","offset","loadedData","i","playlistsUrl","playlistsResponse","playlistsData","Array","total","fill","splice","items","ConfigDropdown","includeArtistsDataCheck","createRef","includeAudioFeaturesDataCheck","state","spin","handleCheckClick","stopPropagation","target","nodeName","props","onConfigChanged","includeArtistsData","current","checked","includeAudioFeaturesData","setState","Dropdown","Toggle","Menu","align","Item","onClickCapture","as","Form","Check","label","ref","PlaylistSearch","searchField","searchSubmitted","handleKeyDown","key","submitSearch","preventDefault","cancelSearch","handleChange","value","onPlaylistSearch","onPlaylistSearchCancel","then","clear","blur","className","InputGroup","Control","role","placeholder","onChange","onKeyDown","Append","Text","TracksData","TracksBaseData","playlist","playlistItems","getPlaylistItems","map","track","Map","item","uri","artists","String","album","release_date","disc_number","track_number","duration_ms","explicit","popularity","added_by","added_at","requests","limit","tracks","push","trackPromises","Promise","all","trackResponses","flatMap","TracksArtistsData","ARTIST_LIMIT","artistIds","from","Set","artistPromises","artistResponses","artistsById","artist","has","genres","g","TracksAudioFeaturesData","AUDIO_FEATURES_LIMIT","trackIds","audioFeaturesPromises","audioFeatures","audio_features","audioFeaturesData","af","danceability","energy","loudness","mode","speechiness","acousticness","instrumentalness","liveness","valence","tempo","time_signature","audioFeaturesTrackIds","keys","x","forEach","trackId","set","TracksCsvFile","columnNames","lineData","tracksData","dataLabels","csvContent","sanitize","string","PlaylistExporter","csvData","blob","Blob","saveAs","fileName","tracksCsvFile","tracksBaseData","addData","tracksArtistsData","tracksAudioFeaturesData","content","PlaylistRow","exportPlaylist","export","catch","condition","style","color","renderIcon","colSpan","renderTickCross","public","collaborative","owner","display_name","Paginator","nextClick","e","onPageChanged","currentPage","prevClick","totalPages","Math","ceil","totalRecords","pageLimit","aria-label","aria-hidden","PlaylistTable","PAGE_SIZE","initialized","searching","playlists","playlistCount","likedSongs","count","progressBar","show","handlePlaylistSearch","handlePlaylistSearchCancel","setSubtitle","loadCurrentPlaylistPage","playlistSearch","likedTracksUrl","likedTracksResponse","likedTracksData","unshift","min","max","handlePlaylistsLoadingStarted","configDropdown","handlePlaylistsLoadingDone","handlePlaylistsExportDone","handlePlaylistExportStarted","playlistName","doneCount","handleConfigChanged","handlePageChanged","page","subtitle","document","getElementById","textContent","ProgressBar","striped","animated","now","width","data-testid","Logout","handleClick","title","FilterSliders","useState","energyValue","setEnergyValue","finalEnergyValue","setFinalEnergyValue","danceValue","setDanceValue","finalDanceValue","setFinalDanceValue","tempoValue","setTempoValue","finalTempoValue","setFinalTempoValue","onAfterChange","tooltip","App","view","URLSearchParams","hash","substring","fontSize","marginBottom","rel","marginTop","process","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","require","shim","apiKey","plugins","BugsnagPluginReact","redactedKeys","enabledReleaseStages","onError","originalError","message","ErrorBoundary","getPlugin","createErrorBoundary","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.764afce3.chunk.js","sourcesContent":["import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { fab } from '@fortawesome/free-brands-svg-icons'\r\nimport { faCheckCircle, faTimesCircle, faFileArchive, faHeart } from '@fortawesome/free-regular-svg-icons'\r\nimport { faBolt, faMusic, faDownload, faCog, faSearch, faTimes, faSignOutAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nlibrary.add(\r\n  fab,\r\n  faCheckCircle,\r\n  faTimesCircle,\r\n  faFileArchive,\r\n  faHeart,\r\n  faBolt,\r\n  faMusic,\r\n  faDownload,\r\n  faCog,\r\n  faSearch,\r\n  faTimes,\r\n  faSignOutAlt\r\n)\r\n","import Bugsnag from \"@bugsnag/js\"\r\nimport axios from \"axios\"\r\nimport Bottleneck from \"bottleneck\"\r\n\r\n// http://stackoverflow.com/a/901144/4167042\r\nexport function getQueryParam(name: string) {\r\n  name = name.replace(/[[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\r\n  var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\r\n      results = regex.exec(window.location.search);\r\n  return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\r\n}\r\n\r\nconst REQUEST_RETRY_BUFFER = 1000\r\nconst MAX_RATE_LIMIT_RETRIES = 2 // 3 attempts in total\r\nconst limiter = new Bottleneck({\r\n  maxConcurrent: 1,\r\n  minTime: 0\r\n})\r\n\r\nlimiter.on(\"failed\", async (error, jobInfo) => {\r\n  if (error.response.status === 429 && jobInfo.retryCount < MAX_RATE_LIMIT_RETRIES) {\r\n    // Retry according to the indication from the server with a small buffer\r\n    return ((error.response.headers[\"retry-after\"] || 1) * 1000) + REQUEST_RETRY_BUFFER\r\n  } else if (error.response.status !== 401 && error.response.status !== 429 && jobInfo.retryCount === 0) {\r\n    // Log and retry any other failure once (e.g. 503/504 which sometimes occur)\r\n    Bugsnag.notify(\r\n      error,\r\n      (event) => {\r\n        event.addMetadata(\"response\", error.response)\r\n        event.addMetadata(\"request\", error.config)\r\n        event.groupingHash = \"Retried Request\"\r\n      }\r\n    )\r\n\r\n    return REQUEST_RETRY_BUFFER\r\n  }\r\n})\r\n\r\nexport const apiCall = limiter.wrap(function(url: string, accessToken: string) {\r\n  return axios.get(url, { headers: { 'Authorization': 'Bearer ' + accessToken } })\r\n})\r\n\r\nexport function apiCallErrorHandler(error: any) {\r\n  if (error.isAxiosError) {\r\n    if (error.request.status === 401) {\r\n      // Return to home page after auth token expiry\r\n      window.location.href = window.location.href.split('#')[0]\r\n      return\r\n    }\r\n  }\r\n\r\n  throw error\r\n}\r\n","import React from \"react\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { getQueryParam } from \"helpers\"\r\n\r\nclass Login extends React.Component {\r\n  authorize() {\r\n    // let clientId = \"b8267324f80b4a9b9ba8c410e566b844\"\r\n    let clientId = getQueryParam(\"app_client_id\")\r\n    let changeUser = getQueryParam(\"change_user\") !== \"\"\r\n\r\n    // Use Exportify application clientId if none given\r\n    if (clientId === '') {\r\n      clientId = \"b8267324f80b4a9b9ba8c410e566b844\"\r\n    }\r\n\r\n    window.location.href = \"https://accounts.spotify.com/authorize\" +\r\n      \"?client_id=\" + clientId +\r\n      \"&redirect_uri=\" + encodeURIComponent([window.location.protocol, '//', window.location.host, window.location.pathname].join('')) +\r\n      \"&scope=playlist-read-private%20playlist-read-collaborative%20user-library-read\" +\r\n      \"&response_type=token\" +\r\n      \"&show_dialog=\" + changeUser;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button id=\"loginButton\" type=\"submit\" variant=\"outline-secondary\" size=\"lg\" onClick={this.authorize}>\r\n        <FontAwesomeIcon icon={['far', 'check-circle']} size=\"sm\" /> Get Started\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Login\r\n","import { apiCall } from \"helpers\"\r\n\r\n// Handles cached loading of all or subsets of playlist data\r\nclass PlaylistsData {\r\n  PLAYLIST_LIMIT = 50\r\n  SEARCH_LIMIT = 20\r\n\r\n  userId: string\r\n  private accessToken: string\r\n  private onPlaylistsLoadingStarted?: () => void\r\n  private onPlaylistsLoadingDone?: () => void\r\n  private data: any[]\r\n  private dataInitialized = false\r\n\r\n  constructor(accessToken: string, userId: string, onPlaylistsLoadingStarted?: () => void, onPlaylistsLoadingDone?: () => void) {\r\n    this.accessToken = accessToken\r\n    this.userId = userId\r\n    this.onPlaylistsLoadingStarted = onPlaylistsLoadingStarted\r\n    this.onPlaylistsLoadingDone = onPlaylistsLoadingDone\r\n    this.data = []\r\n  }\r\n\r\n  async total() {\r\n    if (!this.dataInitialized) {\r\n      await this.loadSlice()\r\n    }\r\n\r\n    return this.data.length\r\n  }\r\n\r\n  async slice(start: number, end: number) {\r\n    return await this.loadSlice(start, end)\r\n  }\r\n\r\n  async all() {\r\n    await this.loadAll()\r\n\r\n    return this.data\r\n  }\r\n\r\n  async search(query: string) {\r\n    await this.loadAll()\r\n\r\n    // Case-insensitive search in playlist name\r\n    // TODO: Add lazy evaluation for performance?\r\n    return this.data\r\n      .filter(p => p.name.toLowerCase().includes(query.toLowerCase()))\r\n      .slice(0, this.SEARCH_LIMIT)\r\n  }\r\n\r\n  async loadAll() {\r\n    if (this.onPlaylistsLoadingStarted) {\r\n      this.onPlaylistsLoadingStarted()\r\n    }\r\n\r\n    await this.loadSlice()\r\n\r\n    // Get the rest of them if necessary\r\n    for (var offset = this.PLAYLIST_LIMIT; offset < this.data.length; offset = offset + this.PLAYLIST_LIMIT) {\r\n      await this.loadSlice(offset, offset + this.PLAYLIST_LIMIT)\r\n    }\r\n\r\n    if (this.onPlaylistsLoadingDone) {\r\n      this.onPlaylistsLoadingDone()\r\n    }\r\n  }\r\n\r\n  private async loadSlice(start = 0, end = start + this.PLAYLIST_LIMIT) {\r\n    if (this.dataInitialized) {\r\n      const loadedData = this.data.slice(start, end)\r\n\r\n      if (loadedData.filter(i => !i).length === 0) {\r\n        return loadedData\r\n      }\r\n    }\r\n\r\n    const playlistsUrl = `https://api.spotify.com/v1/users/${this.userId}/playlists?offset=${start}&limit=${end-start}`\r\n    const playlistsResponse = await apiCall(playlistsUrl, this.accessToken)\r\n    const playlistsData = playlistsResponse.data\r\n\r\n    if (!this.dataInitialized) {\r\n      this.data = Array(playlistsData.total).fill(null)\r\n      this.dataInitialized = true\r\n    }\r\n\r\n    this.data.splice(start, playlistsData.items.length, ...playlistsData.items)\r\n\r\n    return playlistsData.items\r\n  }\r\n}\r\n\r\nexport default PlaylistsData\r\n","import './ConfigDropdown.scss'\r\n\r\nimport React from \"react\"\r\nimport { Dropdown, Form } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\n\r\ntype ConfigDropdownProps = {\r\n  onConfigChanged: (config: any) => void\r\n}\r\n\r\nclass ConfigDropdown extends React.Component<ConfigDropdownProps> {\r\n  private includeArtistsDataCheck = React.createRef<HTMLInputElement>()\r\n  private includeAudioFeaturesDataCheck = React.createRef<HTMLInputElement>()\r\n\r\n  state = {\r\n    spin: false\r\n  }\r\n\r\n  handleCheckClick = (event: React.MouseEvent) => {\r\n    event.stopPropagation()\r\n\r\n    if ((event.target as HTMLElement).nodeName === \"INPUT\") {\r\n      this.props.onConfigChanged({\r\n        includeArtistsData: this.includeArtistsDataCheck.current?.checked || false,\r\n        includeAudioFeaturesData: this.includeAudioFeaturesDataCheck.current?.checked || false\r\n      })\r\n    }\r\n  }\r\n\r\n  spin(spin: boolean) {\r\n    this.setState({ spin: spin })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Dropdown>\r\n        <Dropdown.Toggle variant=\"link\">\r\n          <FontAwesomeIcon icon={['fas', 'cog']} size=\"lg\" spin={this.state.spin} />\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu align=\"right\">\r\n          <Dropdown.Item onClickCapture={this.handleCheckClick} as=\"div\">\r\n            <Form.Check\r\n              id=\"config-include-artists-data\"\r\n              type=\"switch\"\r\n              label=\"Include artists data\"\r\n              ref={this.includeArtistsDataCheck}\r\n            />\r\n          </Dropdown.Item>\r\n          <Dropdown.Item onClickCapture={this.handleCheckClick} as=\"div\">\r\n            <Form.Check\r\n              id=\"config-include-audio-features-data\"\r\n              type=\"switch\"\r\n              label=\"Include audio features data\"\r\n              ref={this.includeAudioFeaturesDataCheck}/>\r\n          </Dropdown.Item>\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ConfigDropdown\r\n","import './PlaylistSearch.scss'\r\n\r\nimport React from \"react\"\r\nimport { Form, InputGroup } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\n\r\ntype PlaylistSearchProps = {\r\n  onPlaylistSearch: (query: string) => void\r\n  onPlaylistSearchCancel: () => Promise<any>\r\n}\r\n\r\nclass PlaylistSearch extends React.Component<PlaylistSearchProps> {\r\n  private searchField = React.createRef<HTMLInputElement>()\r\n\r\n  state = {\r\n    searchSubmitted: false,\r\n    query: \"\"\r\n  }\r\n\r\n  clear() {\r\n    this.setState(\r\n      { searchSubmitted: false, query: \"\" },\r\n      () => {\r\n        if (this.searchField.current) {\r\n          this.searchField.current.value = \"\"\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  handleKeyDown = (event: React.KeyboardEvent) => {\r\n    event.stopPropagation()\r\n\r\n    if (event.key === 'Enter') {\r\n      this.submitSearch()\r\n\r\n      event.preventDefault()\r\n    } else if (event.key === 'Escape') {\r\n      this.cancelSearch()\r\n    }\r\n  }\r\n\r\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ query: event.target.value })\r\n  }\r\n\r\n  private submitSearch = () => {\r\n    if (this.state.query.length > 0) {\r\n      this.setState(\r\n        { searchSubmitted: true },\r\n        () => { this.props.onPlaylistSearch(this.state.query) }\r\n      )\r\n    }\r\n  }\r\n\r\n  private cancelSearch = () => {\r\n    this.props.onPlaylistSearchCancel().then(() => {\r\n      this.clear()\r\n\r\n      if (this.searchField.current) {\r\n        this.searchField.current.blur()\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const icon = (this.state.searchSubmitted)\r\n      ? <FontAwesomeIcon icon={['fas', 'times']} size=\"sm\" onClick={this.cancelSearch} className=\"closeIcon\" />\r\n      : <FontAwesomeIcon icon={['fas', 'search']} size=\"sm\" onClick={this.submitSearch} className=\"searchIcon\" />\r\n\r\n    const className = this.state.query.length > 0 ? \"search queryPresent\" : \"search\"\r\n\r\n    return (\r\n      <Form className={className}>\r\n        <InputGroup>\r\n          <Form.Control type=\"text\" role=\"searchbox\" placeholder=\"Search\" size=\"sm\" onChange={this.handleChange} onKeyDown={this.handleKeyDown} ref={this.searchField} className=\"border-right-0 border\" />\r\n          <InputGroup.Append>\r\n            <InputGroup.Text className=\"bg-transparent\">\r\n              {icon}\r\n            </InputGroup.Text>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default PlaylistSearch\r\n","abstract class TracksData {\r\n  accessToken: string\r\n\r\n  constructor(accessToken: string) {\r\n    this.accessToken = accessToken\r\n  }\r\n\r\n  abstract dataLabels(): string[]\r\n  abstract data(): Promise<Map<string, string[]>>\r\n}\r\n\r\nexport default TracksData\r\n","import TracksData from \"./TracksData\"\r\nimport { apiCall } from \"helpers\"\r\n\r\nclass TracksBaseData extends TracksData {\r\n  playlist: any\r\n\r\n  constructor(accessToken: string, playlist: any) {\r\n    super(accessToken)\r\n    this.playlist = playlist\r\n  }\r\n\r\n  dataLabels() {\r\n    return [\r\n      \"Track URI\",\r\n      \"Track Name\",\r\n      \"Artist URI\",\r\n      \"Artist Name\",\r\n      \"Album URI\",\r\n      \"Album Name\",\r\n      \"Album Release Date\",\r\n      \"Disc Number\",\r\n      \"Track Number\",\r\n      \"Track Duration (ms)\",\r\n      \"Explicit\",\r\n      \"Popularity\",\r\n      \"Added By\",\r\n      \"Added At\"\r\n    ]\r\n  }\r\n\r\n  async tracks() {\r\n    await this.getPlaylistItems()\r\n\r\n    return this.playlistItems.map(i => i.track)\r\n  }\r\n\r\n  async data() {\r\n    await this.getPlaylistItems()\r\n\r\n    return new Map(this.playlistItems.map(item => {\r\n      return [\r\n        item.track.id,\r\n        [\r\n          item.track.uri,\r\n          item.track.name,\r\n          item.track.artists.map((a: any) => { return a.uri }).join(', '),\r\n          item.track.artists.map((a: any) => { return String(a.name).replace(/,/g, \"\\\\,\") }).join(', '),\r\n          item.track.album.uri,\r\n          item.track.album.name,\r\n          item.track.album.release_date,\r\n          item.track.disc_number,\r\n          item.track.track_number,\r\n          item.track.duration_ms,\r\n          item.track.explicit,\r\n          item.track.popularity,\r\n          item.added_by == null ? '' : item.added_by.uri,\r\n          item.added_at\r\n        ]\r\n      ]\r\n    }))\r\n  }\r\n\r\n  // Memoization supporting multiple calls\r\n  private playlistItems: any[] = []\r\n  private async getPlaylistItems() {\r\n    if (this.playlistItems.length > 0) {\r\n      return this.playlistItems\r\n    }\r\n\r\n    var requests = []\r\n    var limit = this.playlist.tracks.limit || 100\r\n\r\n    for (var offset = 0; offset < this.playlist.tracks.total; offset = offset + limit) {\r\n      requests.push(`${this.playlist.tracks.href.split('?')[0]}?offset=${offset}&limit=${limit}`)\r\n    }\r\n\r\n    const trackPromises = requests.map(request => { return apiCall(request, this.accessToken) })\r\n    const trackResponses = await Promise.all(trackPromises)\r\n\r\n    this.playlistItems = trackResponses.flatMap(response => {\r\n      return response.data.items.filter((i: any) => i.track) // Exclude null track attributes\r\n    })\r\n  }\r\n}\r\n\r\nexport default TracksBaseData\r\n","import TracksData from \"./TracksData\"\r\nimport { apiCall } from \"helpers\"\r\n\r\nclass TracksArtistsData extends TracksData {\r\n  ARTIST_LIMIT = 50\r\n\r\n  tracks: any[]\r\n\r\n  constructor(accessToken: string, tracks: any[]) {\r\n    super(accessToken)\r\n    this.tracks = tracks\r\n  }\r\n\r\n  dataLabels() {\r\n    return [\r\n      \"Artist Genres\"\r\n    ]\r\n  }\r\n\r\n  async data() {\r\n    const artistIds = Array.from(new Set(this.tracks.flatMap((track: any) => {\r\n      return track\r\n        .artists\r\n        .filter((a: any) => a.type === \"artist\")\r\n        .map((a: any) => a.id)\r\n        .filter((i: string) => i)\r\n    })))\r\n\r\n    let requests = []\r\n\r\n    for (var offset = 0; offset < artistIds.length; offset = offset + this.ARTIST_LIMIT) {\r\n      requests.push(`https://api.spotify.com/v1/artists?ids=${artistIds.slice(offset, offset + this.ARTIST_LIMIT)}`)\r\n    }\r\n\r\n    const artistPromises = requests.map(request => { return apiCall(request, this.accessToken) })\r\n    const artistResponses = await Promise.all(artistPromises)\r\n\r\n    const artistsById = new Map(artistResponses.flatMap((response) => response.data.artists).map((artist: any) => [artist.id, artist]))\r\n\r\n    return new Map<string, string[]>(this.tracks.map((track: any) => {\r\n      return [\r\n        track.id,\r\n        [\r\n          track.artists.map((a: any) => {\r\n            return artistsById.has(a.id) ? artistsById.get(a.id)!.genres.filter((g: string) => g).join(',') : \"\"\r\n          }).filter((g: string) => g).join(\",\")\r\n        ]\r\n      ]\r\n    }))\r\n  }\r\n}\r\n\r\nexport default TracksArtistsData\r\n","import TracksData from \"./TracksData\"\r\nimport { apiCall } from \"helpers\"\r\n\r\nclass TracksAudioFeaturesData extends TracksData {\r\n  AUDIO_FEATURES_LIMIT = 100\r\n\r\n  tracks: any[]\r\n\r\n  constructor(accessToken: string, tracks: any[]) {\r\n    super(accessToken)\r\n    this.tracks = tracks\r\n  }\r\n\r\n  dataLabels() {\r\n    return [\r\n      \"Danceability\",\r\n      \"Energy\",\r\n      \"Key\",\r\n      \"Loudness\",\r\n      \"Mode\",\r\n      \"Speechiness\",\r\n      \"Acousticness\",\r\n      \"Instrumentalness\",\r\n      \"Liveness\",\r\n      \"Valence\",\r\n      \"Tempo\",\r\n      \"Time Signature\"\r\n    ]\r\n  }\r\n\r\n  async data() {\r\n    const trackIds = this.tracks.map((track: any) => track.id)\r\n\r\n    let requests = []\r\n\r\n    for (var offset = 0; offset < trackIds.length; offset = offset + this.AUDIO_FEATURES_LIMIT) {\r\n      requests.push(`https://api.spotify.com/v1/audio-features?ids=${trackIds.slice(offset, offset + this.AUDIO_FEATURES_LIMIT)}`)\r\n    }\r\n\r\n    const audioFeaturesPromises = requests.map(request => { return apiCall(request, this.accessToken) })\r\n    const audioFeatures = (await Promise.all(audioFeaturesPromises)).flatMap((response) => response.data.audio_features)\r\n\r\n    const audioFeaturesData = new Map<string, string[]>(audioFeatures.filter((af: any) => af).map((audioFeatures: any) => {\r\n      return [\r\n        audioFeatures.id,\r\n        [\r\n          audioFeatures.danceability,\r\n          audioFeatures.energy,\r\n          audioFeatures.key,\r\n          audioFeatures.loudness,\r\n          audioFeatures.mode,\r\n          audioFeatures.speechiness,\r\n          audioFeatures.acousticness,\r\n          audioFeatures.instrumentalness,\r\n          audioFeatures.liveness,\r\n          audioFeatures.valence,\r\n          audioFeatures.tempo,\r\n          audioFeatures.time_signature\r\n        ]\r\n      ]\r\n    }))\r\n\r\n    // Add empty fields where we didn't get data - can be the case for example with episodes\r\n    const audioFeaturesTrackIds = Array.from(audioFeaturesData.keys())\r\n    trackIds.filter(x => !audioFeaturesTrackIds.includes(x)).forEach((trackId) => {\r\n      audioFeaturesData.set(trackId, [\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"])\r\n    })\r\n\r\n    return audioFeaturesData\r\n  }\r\n}\r\n\r\nexport default TracksAudioFeaturesData\r\n","import { saveAs } from \"file-saver\"\r\n\r\nimport TracksData from \"components/data/TracksData\"\r\nimport TracksBaseData from \"components/data/TracksBaseData\"\r\nimport TracksArtistsData from \"components/data/TracksArtistsData\"\r\nimport TracksAudioFeaturesData from \"components/data/TracksAudioFeaturesData\"\r\n\r\nclass TracksCsvFile {\r\n  playlist: any\r\n  columnNames: string[]\r\n  lineData: Map<string, string[]>\r\n\r\n  constructor(playlist: any) {\r\n    this.playlist = playlist\r\n    this.columnNames = []\r\n    this.lineData = new Map()\r\n  }\r\n\r\n  async addData(tracksData: TracksData) {\r\n    this.columnNames.push(...tracksData.dataLabels())\r\n\r\n    const data: Map<string, string[]> = await tracksData.data()\r\n\r\n    data.forEach((value: string[], key: string) => {\r\n      if (this.lineData.has(key)) {\r\n        this.lineData.get(key)!.push(...value)\r\n      } else {\r\n        this.lineData.set(key, value)\r\n      }\r\n    })\r\n  }\r\n\r\n  content(): string {\r\n    let csvContent = ''\r\n\r\n    csvContent += this.columnNames.map(this.sanitize).join() + \"\\n\"\r\n\r\n    this.lineData.forEach((lineData, trackId) => {\r\n      csvContent += lineData.map(this.sanitize).join(\",\") + \"\\n\"\r\n    })\r\n\r\n    return csvContent\r\n  }\r\n\r\n  sanitize(string: string): string {\r\n    return '\"' + String(string).replace(/\"/g, '\"\"') + '\"'\r\n  }\r\n}\r\n\r\n// Handles exporting a single playlist as a CSV file\r\nclass PlaylistExporter {\r\n  accessToken: string\r\n  playlist: any\r\n  config: any\r\n\r\n  constructor(accessToken: string, playlist: any, config: any) {\r\n    this.accessToken = accessToken\r\n    this.playlist = playlist\r\n    this.config = config\r\n  }\r\n\r\n  async export() {\r\n    return this.csvData().then((data) => {\r\n      var blob = new Blob([ data ], { type: \"text/csv;charset=utf-8\" })\r\n      saveAs(blob, this.fileName(), true)\r\n    })\r\n  }\r\n\r\n  async csvData() {\r\n    const tracksCsvFile = new TracksCsvFile(this.playlist)\r\n    const tracksBaseData = new TracksBaseData(this.accessToken, this.playlist)\r\n\r\n    await tracksCsvFile.addData(tracksBaseData)\r\n    const tracks = await tracksBaseData.tracks()\r\n\r\n    if (this.config.includeArtistsData) {\r\n      const tracksArtistsData = new TracksArtistsData(this.accessToken, tracks)\r\n      await tracksCsvFile.addData(tracksArtistsData)\r\n    }\r\n\r\n    if (this.config.includeAudioFeaturesData) {\r\n      const tracksAudioFeaturesData = new TracksAudioFeaturesData(this.accessToken, tracks)\r\n      await tracksCsvFile.addData(tracksAudioFeaturesData)\r\n    }\r\n\r\n    tracksBaseData.tracks()\r\n\r\n    return tracksCsvFile.content()\r\n  }\r\n\r\n  fileName(): string {\r\n    return this.playlist.name.replace(/[\\x00-\\x1F\\x7F/\\\\<>:;\"|=,.?*[\\] ]+/g, \"_\").toLowerCase() + \".csv\" // eslint-disable-line no-control-regex\r\n  }\r\n}\r\n\r\nexport default PlaylistExporter\r\n","import React from \"react\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\n\r\nimport { apiCallErrorHandler } from \"helpers\"\r\nimport PlaylistExporter from \"./PlaylistExporter\"\r\n\r\nclass PlaylistRow extends React.Component {\r\n  exportPlaylist = () => {\r\n    (new PlaylistExporter(\r\n      this.props.accessToken,\r\n      this.props.playlist,\r\n      this.props.config\r\n    )).export().catch(apiCallErrorHandler)\r\n  }\r\n\r\n  renderTickCross(condition) {\r\n    if (condition) {\r\n      return <FontAwesomeIcon icon={['far', 'check-circle']} size=\"sm\" />\r\n    } else {\r\n      return <FontAwesomeIcon icon={['far', 'times-circle']} size=\"sm\" style={{ color: '#ECEBE8' }} />\r\n    }\r\n  }\r\n\r\n  renderIcon(playlist) {\r\n    if (playlist.name === 'Liked') {\r\n      return <FontAwesomeIcon icon={['far', 'heart']} style={{ color: 'red' }} />;\r\n    } else {\r\n      return <FontAwesomeIcon icon={['fas', 'music']} />;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let playlist = this.props.playlist\r\n\r\n    if(playlist.uri==null) return (\r\n      <tr key={playlist.name}>\r\n        <td>{this.renderIcon(playlist)}</td>\r\n        <td>{playlist.name}</td>\r\n        <td colSpan=\"2\">This playlist is not supported</td>\r\n        <td>{this.renderTickCross(playlist.public)}</td>\r\n        <td>{this.renderTickCross(playlist.collaborative)}</td>\r\n        <td>&nbsp;</td>\r\n      </tr>\r\n    );\r\n\r\n    return (\r\n      <tr key={playlist.uri}>\r\n        <td>{this.renderIcon(playlist)}</td>\r\n        <td><a href={playlist.uri}>{playlist.name}</a></td>\r\n        <td><a href={playlist.owner.uri}>{playlist.owner.display_name}</a></td>\r\n        <td>{playlist.tracks.total}</td>\r\n        <td>{this.renderTickCross(playlist.public)}</td>\r\n        <td>{this.renderTickCross(playlist.collaborative)}</td>\r\n        <td className=\"text-right\">\r\n          {/* <Button type=\"submit\" variant=\"primary\" size=\"xs\" onClick={this.exportPlaylist} className=\"text-nowrap\">\r\n            <FontAwesomeIcon icon={['fas', 'download']} size=\"sm\" /> Export\r\n          </Button> */}\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PlaylistRow\r\n","import React from \"react\"\r\n\r\nclass Paginator extends React.Component {\r\n  nextClick = (e) => {\r\n    e.preventDefault()\r\n\r\n    this.props.onPageChanged(this.props.currentPage + 1)\r\n  }\r\n\r\n  prevClick = (e) => {\r\n    e.preventDefault()\r\n\r\n    this.props.onPageChanged(this.props.currentPage - 1)\r\n  }\r\n\r\n  totalPages = () => {\r\n    return Math.ceil(this.props.totalRecords / this.props.pageLimit)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <nav className=\"paginator text-right\">\r\n        <ul className=\"pagination pagination-sm\">\r\n          <li className={this.props.currentPage <= 1 ? 'page-item disabled' : 'page-item'}>\r\n            { /* eslint-disable-next-line  */ }\r\n            <a className=\"page-link\" href=\"#\" aria-label=\"Previous\" onClick={this.prevClick}>\r\n              <span aria-hidden=\"true\">&laquo;</span>\r\n            </a>\r\n          </li>\r\n          <li className={this.props.currentPage >= this.totalPages() ? 'page-item disabled' : 'page-item'}>\r\n            { /* eslint-disable-next-line  */ }\r\n            <a className=\"page-link\" href=\"#\" aria-label=\"Next\" onClick={this.nextClick}>\r\n              <span aria-hidden=\"true\">&raquo;</span>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Paginator\r\n","import React from \"react\"\r\nimport { ProgressBar } from \"react-bootstrap\"\r\n\r\nimport PlaylistsData from \"./data/PlaylistsData\"\r\nimport ConfigDropdown from \"./ConfigDropdown\"\r\nimport PlaylistSearch from \"./PlaylistSearch\"\r\nimport PlaylistRow from \"./PlaylistRow\"\r\nimport Paginator from \"./Paginator\"\r\nimport PlaylistsExporter from \"./PlaylistsExporter\"\r\nimport { apiCall, apiCallErrorHandler } from \"helpers\"\r\n\r\nclass PlaylistTable extends React.Component {\r\n  PAGE_SIZE = 20\r\n\r\n  userId = null\r\n  playlistsData = null\r\n\r\n  state = {\r\n    initialized: false,\r\n    searching: false,\r\n    playlists: [],\r\n    playlistCount: 0,\r\n    likedSongs: {\r\n      limit: 0,\r\n      count: 0\r\n    },\r\n    currentPage: 1,\r\n    progressBar: {\r\n      show: false,\r\n      label: \"\",\r\n      value: 0\r\n    },\r\n    config: {\r\n      includeArtistsData: false,\r\n      includeAudioFeaturesData: false\r\n    }\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.configDropdown = React.createRef()\r\n    this.playlistSearch = React.createRef()\r\n\r\n    if (props.config) {\r\n      this.state.config = props.config\r\n    }\r\n  }\r\n\r\n  handlePlaylistSearch = async (query) => {\r\n    if (query.length === 0) {\r\n      this.handlePlaylistSearchCancel()\r\n    } else {\r\n      const playlists = await this.playlistsData.search(query).catch(apiCallErrorHandler)\r\n\r\n      this.setState({\r\n        searching: true,\r\n        playlists: playlists,\r\n        playlistCount: playlists.length,\r\n        currentPage: 1\r\n      })\r\n\r\n      if (playlists.length === this.playlistsData.SEARCH_LIMIT) {\r\n        this.setSubtitle(`First ${playlists.length} results with \"${query}\" in playlist name`)\r\n      } else {\r\n        this.setSubtitle(`${playlists.length} results with \"${query}\" in playlist name`)\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePlaylistSearchCancel = () => {\r\n    return this.loadCurrentPlaylistPage().catch(apiCallErrorHandler)\r\n  }\r\n\r\n  loadCurrentPlaylistPage = async () => {\r\n    if (this.playlistSearch.current) {\r\n      this.playlistSearch.current.clear()\r\n    }\r\n\r\n    const playlists = await this.playlistsData.slice(\r\n      ((this.state.currentPage - 1) * this.PAGE_SIZE),\r\n      ((this.state.currentPage - 1) * this.PAGE_SIZE) + this.PAGE_SIZE\r\n    ).catch(apiCallErrorHandler)\r\n\r\n    // Show library of saved tracks if viewing first page\r\n    if (this.state.currentPage === 1) {\r\n      const likedTracksUrl = `https://api.spotify.com/v1/users/${this.userId}/tracks`\r\n      const likedTracksResponse = await apiCall(likedTracksUrl, this.props.accessToken)\r\n      const likedTracksData = likedTracksResponse.data\r\n\r\n      playlists.unshift({\r\n        \"id\": \"liked\",\r\n        \"name\": \"Liked\",\r\n        \"public\": false,\r\n        \"collaborative\": false,\r\n        \"owner\": {\r\n          \"id\": this.userId,\r\n          \"display_name\": this.userId,\r\n          \"uri\": \"spotify:user:\" + this.userId\r\n        },\r\n        \"tracks\": {\r\n          \"href\": \"https://api.spotify.com/v1/me/tracks\",\r\n          \"limit\": likedTracksData.limit,\r\n          \"total\": likedTracksData.total\r\n        },\r\n        \"uri\": \"spotify:user:\" + this.userId + \":saved\"\r\n      });\r\n\r\n      // FIXME: Handle unmounting\r\n      this.setState({\r\n        likedSongs: {\r\n          limit: likedTracksData.limit,\r\n          count: likedTracksData.total\r\n        }\r\n      })\r\n    }\r\n\r\n    // FIXME: Handle unmounting\r\n    this.setState(\r\n      {\r\n        initialized: true,\r\n        searching: false,\r\n        playlists: playlists,\r\n        playlistCount: await this.playlistsData.total()\r\n      },\r\n      () => {\r\n        const min = ((this.state.currentPage - 1) * this.PAGE_SIZE) + 1\r\n        const max = Math.min(min + this.PAGE_SIZE - 1, this.state.playlistCount)\r\n        this.setSubtitle(`${min}-${max} of ${this.state.playlistCount} playlists for ${this.userId}`)\r\n      }\r\n    )\r\n  }\r\n\r\n  handlePlaylistsLoadingStarted = () => {\r\n    this.configDropdown.current.spin(true)\r\n  }\r\n\r\n  handlePlaylistsLoadingDone = () => {\r\n    this.configDropdown.current.spin(false)\r\n  }\r\n\r\n  handlePlaylistsExportDone = () => {\r\n    this.setState({\r\n      progressBar: {\r\n        show: true,\r\n        label: \"Done!\",\r\n        value: this.state.playlistCount\r\n      }\r\n    })\r\n  }\r\n\r\n  handlePlaylistExportStarted = (playlistName, doneCount) => {\r\n    this.setState({\r\n      progressBar: {\r\n        show: true,\r\n        label: `Exporting ${playlistName}...`,\r\n        value: doneCount\r\n      }\r\n    })\r\n  }\r\n\r\n  handleConfigChanged = (config) => {\r\n    this.setState({ config: config })\r\n  }\r\n\r\n  handlePageChanged = (page) => {\r\n    try {\r\n      this.setState(\r\n        { currentPage: page },\r\n        this.loadCurrentPlaylistPage\r\n      )\r\n    } catch(error) {\r\n      apiCallErrorHandler(error)\r\n    }\r\n  }\r\n\r\n  setSubtitle(subtitle) {\r\n    if (document.getElementById(\"subtitle\") !== null) {\r\n      document.getElementById(\"subtitle\").textContent = subtitle\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      this.userId = await apiCall(\"https://api.spotify.com/v1/me\", this.props.accessToken)\r\n        .then(response => response.data.id)\r\n      this.playlistsData = new PlaylistsData(\r\n        this.props.accessToken,\r\n        this.userId,\r\n        this.handlePlaylistsLoadingStarted,\r\n        this.handlePlaylistsLoadingDone\r\n      )\r\n\r\n      await this.loadCurrentPlaylistPage()\r\n    } catch(error) {\r\n      apiCallErrorHandler(error)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const progressBar = <ProgressBar striped variant=\"primary\" animated={this.state.progressBar.value < this.state.playlistCount} now={this.state.progressBar.value} max={this.state.playlistCount} label={this.state.progressBar.label} />\r\n\r\n    if (this.state.initialized) {\r\n      return (\r\n        <div id=\"playlists\">\r\n          <div id=\"playlistsHeader\">\r\n            <Paginator currentPage={this.state.currentPage} pageLimit={this.PAGE_SIZE} totalRecords={this.state.playlistCount} onPageChanged={this.handlePageChanged}/>\r\n            <PlaylistSearch onPlaylistSearch={this.handlePlaylistSearch} onPlaylistSearchCancel={this.handlePlaylistSearchCancel} ref={this.playlistSearch} />\r\n            <ConfigDropdown onConfigChanged={this.handleConfigChanged} ref={this.configDropdown} />\r\n            {this.state.progressBar.show && progressBar}\r\n          </div>\r\n          <table className=\"table table-hover table-sm\">\r\n            <thead>\r\n              <tr>\r\n                <th style={{width: \"30px\"}}></th>\r\n                <th>Name</th>\r\n                <th style={{width: \"150px\"}}>Owner</th>\r\n                <th style={{width: \"100px\"}}>Tracks</th>\r\n                <th style={{width: \"120px\"}}>Public?</th>\r\n                <th style={{width: \"120px\"}}>Collaborative?</th>\r\n                <th style={{width: \"100px\"}} className=\"text-right\">\r\n                  {/* <PlaylistsExporter\r\n                    accessToken={this.props.accessToken}\r\n                    onPlaylistsExportDone={this.handlePlaylistsExportDone}\r\n                    onPlaylistExportStarted={this.handlePlaylistExportStarted}\r\n                    playlistsData={this.playlistsData}\r\n                    likedSongs={this.state.likedSongs}\r\n                    config={this.state.config}\r\n                    disabled={this.state.searching}\r\n                  /> */}\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.playlists.map((playlist, i) => {\r\n                return <PlaylistRow\r\n                  playlist={playlist}\r\n                  key={playlist.id}\r\n                  accessToken={this.props.accessToken}\r\n                  config={this.state.config}\r\n                />\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div id=\"playlistsFooter\">\r\n            <Paginator currentPage={this.state.currentPage} pageLimit={this.PAGE_SIZE} totalRecords={this.state.playlistCount} onPageChanged={this.handlePageChanged}/>\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <div className=\"spinner\" data-testid=\"playlistTableSpinner\"></div>\r\n    }\r\n  }\r\n}\r\n\r\nexport default PlaylistTable\r\n","import React from \"react\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { saveAs } from \"file-saver\"\r\nimport JSZip from \"jszip\"\r\n\r\nimport PlaylistExporter from \"./PlaylistExporter\"\r\nimport { apiCallErrorHandler } from \"helpers\"\r\n\r\n// Handles exporting all playlist data as a zip file\r\nclass PlaylistsExporter extends React.Component {\r\n  async export(accessToken, playlistsData, likedSongsLimit, likedSongsCount, config) {\r\n    let playlistFileNames = []\r\n    let playlistCsvExports = []\r\n\r\n    const playlists = await playlistsData.all(this.props.onLoadedPlaylistCountChanged)\r\n\r\n    // Add library of saved tracks\r\n    playlists.unshift({\r\n      \"id\": \"liked\",\r\n      \"name\": \"Liked\",\r\n      \"tracks\": {\r\n        \"href\": \"https://api.spotify.com/v1/me/tracks\",\r\n        \"limit\": likedSongsLimit,\r\n        \"total\": likedSongsCount\r\n      },\r\n    })\r\n\r\n    let doneCount = 0\r\n\r\n    for (const playlist of playlists) {\r\n      this.props.onPlaylistExportStarted(playlist.name, doneCount)\r\n\r\n      let exporter = new PlaylistExporter(accessToken, playlist, config)\r\n      let csvData = await exporter.csvData()\r\n\r\n      playlistFileNames.push(exporter.fileName(playlist))\r\n      playlistCsvExports.push(csvData)\r\n\r\n      doneCount++\r\n    }\r\n\r\n    this.props.onPlaylistsExportDone()\r\n\r\n    var zip = new JSZip()\r\n\r\n    playlistCsvExports.forEach(function(csv, i) {\r\n      zip.file(playlistFileNames[i], csv)\r\n    })\r\n\r\n    zip.generateAsync({ type: \"blob\" }).then(function(content) {\r\n      saveAs(content, \"spotify_playlists.zip\");\r\n    })\r\n  }\r\n\r\n  exportPlaylists = () => {\r\n    this.export(\r\n      this.props.accessToken,\r\n      this.props.playlistsData,\r\n      this.props.likedSongs.limit,\r\n      this.props.likedSongs.count,\r\n      this.props.config\r\n    ).catch(apiCallErrorHandler)\r\n  }\r\n\r\n  render() {\r\n    return <Button type=\"submit\" variant=\"outline-secondary\" size=\"xs\" onClick={this.exportPlaylists} className=\"text-nowrap\" disabled={this.props.disabled}>\r\n      <FontAwesomeIcon icon={['far', 'file-archive']}/> Export All\r\n    </Button>\r\n  }\r\n}\r\n\r\nexport default PlaylistsExporter\r\n","import React from \"react\"\r\nimport { Button } from \"react-bootstrap\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\n\r\nclass Logout extends React.Component {\r\n  handleClick = () => {\r\n    window.location.href = `${window.location.href.split('#')[0]}?change_user=true`\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Button id=\"logoutButton\" type=\"submit\" variant=\"link\" size=\"lg\" onClick={this.handleClick} title=\"Change user\">\r\n        <FontAwesomeIcon icon={['fas', 'sign-out-alt']} size=\"lg\" />\r\n      </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Logout\r\n","import React, { useState } from 'react';\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\n\r\nconst FilterSliders = () => {\r\n\r\n  const [ energyValue, setEnergyValue ] = useState(7);\r\n  const [ finalEnergyValue, setFinalEnergyValue ] = React.useState(energyValue);\r\n  const [ danceValue, setDanceValue ] = useState(5);\r\n  const [ finalDanceValue, setFinalDanceValue ] = React.useState(danceValue);\r\n  const [ tempoValue, setTempoValue ] = useState(120);\r\n  const [ finalTempoValue, setFinalTempoValue ] = React.useState(tempoValue);\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div>\r\n        <RangeSlider\r\n          value={energyValue}\r\n          onChange={e => setEnergyValue(e.target.value)}\r\n          onAfterChange={e => setFinalEnergyValue(e.target.value)}\r\n          min={0}\r\n          max={10}\r\n          tooltip='off'\r\n        />\r\n        <div>Minimum Energy Rating: {finalEnergyValue / 10.0}</div>\r\n      </div>\r\n\r\n      <div>\r\n        <RangeSlider\r\n          value={danceValue}\r\n          onChange={e => setDanceValue(e.target.value)}\r\n          onAfterChange={e => setFinalDanceValue(e.target.value)}\r\n          min={0}\r\n          max={10}\r\n          tooltip='off'\r\n        />\r\n        <div>Minimum Danceability Rating: {finalDanceValue / 10.0}</div>\r\n      </div>\r\n\r\n      <div>\r\n        <RangeSlider\r\n          value={tempoValue}\r\n          onChange={e => setTempoValue(e.target.value)}\r\n          onAfterChange={e => setFinalTempoValue(e.target.value)}\r\n          min={0}\r\n          max={200}\r\n          tooltip='off'\r\n        />\r\n        <div>Minimum Tempo: {finalTempoValue} bpm</div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default FilterSliders;","import './App.scss'\r\nimport \"./icons\"\r\n\r\nimport React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport \"url-search-params-polyfill\"\r\n\r\nimport Login from 'components/Login'\r\nimport PlaylistTable from \"components/PlaylistTable\"\r\nimport { getQueryParam } from \"helpers\"\r\nimport Logout from \"components/Logout\"\r\nimport FilterSliders from 'components/FilterSliders'\r\n\r\nfunction App() {\r\n  let view\r\n  let key = new URLSearchParams(window.location.hash.substring(1))\r\n\r\n  if (getQueryParam('rate_limit_message') !== '') {\r\n    view = <div id=\"rateLimitMessage\" className=\"lead\">\r\n      <p><FontAwesomeIcon icon={['fas', 'bolt']} style={{ fontSize: \"50px\", marginBottom: \"20px\" }} /></p>\r\n      <p>Oops, Exportify has encountered a <a target=\"_blank\" rel=\"noreferrer\" href=\"https://developer.spotify.com/web-api/user-guide/#rate-limiting\">rate limiting</a> error while using the Spotify API. This might be because of the number of users currently exporting playlists, or perhaps because you have too many playlists to export all at once. Try <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/watsonbox/exportify/issues/6#issuecomment-110793132\">creating your own</a> Spotify application. If that doesn't work, please add a comment to <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/watsonbox/exportify/issues/6\">this issue</a> where possible resolutions are being discussed.</p>\r\n      <p style={{ marginTop: \"50px\" }}>It should still be possible to export individual playlists, particularly when using your own Spotify application.</p>\r\n    </div>\r\n  } else if (key.has('access_token')) {\r\n    view = <div>\r\n      <FilterSliders />\r\n      <PlaylistTable accessToken={key.get('access_token')} />\r\n    </div>\r\n  } else {\r\n    view = <Login />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App container\">\r\n      <header className=\"App-header\">\r\n        { key.has('access_token') && <Logout /> }\r\n        <h1>\r\n          <FontAwesomeIcon icon={['fab', 'spotify']} color=\"#84BD00\" size=\"sm\" /> <a href={process.env.PUBLIC_URL}>Pumpify</a>\r\n        </h1>\r\n\r\n        <p id=\"subtitle\" className=\"lead text-secondary\">\r\n          Create Spotify playlist from Liked Songs to get Pumped\r\n        </p>\r\n      </header>\r\n\r\n      {view}\r\n      <footer className=\"App-footer\">\r\n        <p id=\"subtitle\" className=\"lead text-secondary\">\r\n          Based on<a href=\"https://watsonbox.github.io/exportify/\" target=\"_blank\"> Exportify by Watsonbox</a> \r\n        </p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\"\r\nimport Bugsnag from '@bugsnag/js'\r\nimport BugsnagPluginReact from '@bugsnag/plugin-react'\r\nimport ReactDOM from \"react-dom\"\r\nimport \"./index.scss\"\r\nimport App from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\n\r\n// https://caniuse.com/mdn-javascript_builtins_array_flatmap\r\nrequire('array.prototype.flatmap').shim()\r\n\r\nBugsnag.start({\r\n  apiKey: 'a65916528275f084a1754a59797a36b3',\r\n  plugins: [new BugsnagPluginReact()],\r\n  redactedKeys: ['Authorization'],\r\n  enabledReleaseStages: [ 'production', 'staging' ],\r\n  onError: function (event) {\r\n    event.request.url = \"[REDACTED]\" // Don't send access tokens\r\n\r\n    if (event.originalError.isAxiosError) {\r\n      event.groupingHash = event.originalError.message\r\n    }\r\n  }\r\n})\r\n\r\nconst ErrorBoundary = Bugsnag.getPlugin('react')!.createErrorBoundary(React)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ErrorBoundary>\r\n      <App />\r\n    </ErrorBoundary>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}